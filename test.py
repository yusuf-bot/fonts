from tensorflow.keras import layers, Input, Model
inputs = Input(shape=(224, 224, 3))
x = layers.Conv2D(64, (3, 3), padding='same')(inputs)
def cbam_block(inputs, reduction_ratio=16):
    avg_pool = layers.GlobalAveragePooling2D()(inputs)
    max_pool = layers.GlobalMaxPooling2D()(inputs)
    channel = layers.Dense(units=inputs.shape[-1] // reduction_ratio, activation='relu')(avg_pool)
    channel = layers.Dense(units=inputs.shape[-1])(channel)
    channel_max = layers.Dense(units=inputs.shape[-1] // reduction_ratio, activation='relu')(max_pool)
    channel_max = layers.Dense(units=inputs.shape[-1])(channel_max)
    channel = layers.Activation('sigmoid')(layers.Add()([channel, channel_max]))
    channel_attention = layers.Multiply()([inputs, channel])
    avg_pool = layers.GlobalAveragePooling2D()(channel_attention)
    max_pool = layers.GlobalMaxPooling2D()(channel_attention)
    avg_pool = layers.Reshape((1, 1, channel_attention.shape[-1]))(avg_pool)
    max_pool = layers.Reshape((1, 1, channel_attention.shape[-1]))(max_pool)
    spatial = layers.Concatenate(axis=-1)([avg_pool, max_pool])
    spatial = layers.Conv2D(1, (7, 7), padding='same', activation='sigmoid')(spatial)
    return layers.Multiply()([channel_attention, spatial])
x = cbam_block(x)
model = Model(inputs, x)
model.summary()
